package reference_casting;

public class Ex_0322_refcast {

	public static void main(String[] args) {
		/*
		 * 레퍼런스 형변환
		 * 	> 어떤 객체(인스턴스)를 다른 타입으로 변환하는 것.
		 * 	> 참조형 데이터타입간의 변환.
		 * 	> !!반드시!! 상속 관계여야 한다. >> 상속 X > 형변환 X
		 *  > 슈퍼클래스 타입 <--> 서브클래스 타입
		 *  
		 *  > > 묵시적 형변환 (업캐스팅   , Up Casting)
		 *    > 명시적 형변환 (다운캐스팅 , Down Casting)
		 *    
		 *    1. 업캐스팅 (묵시적)
		 *    		> 슈퍼클래스타입 레퍼런스로 서브클래스 인스턴스를 참조하는 것 !!
		 *    			>> 서브클래스의 인스턴스를 슈퍼클래스 타입으로 변환하는 것.
		 *    		> 컴파일러에 의해 자동 형변환이 일어난다. (그래서 묵시적)
		 *    			>> double > int 생각하면됨. 형변환 연산자 생략 가능
		 *    		> 참조 가능한 영역이 축소된다.(슈퍼클래스로부터 상속된 멤버만 접근 가능)
		 *    		> 서브클래스 인스턴스멤버 중 공통 항목을 제외한 나머지에 대한 포기선언!
		 *    			>> 대신, 하나의 슈퍼클래스 타입으로 여러 서브클래스의 인스턴스를 참조할 수 있다.
		 *    
		 *    2. 다운캐스팅 (명시적)
		 *    		> 서브클래스의 레퍼런스가 슈퍼클래스의 인스턴스를 참조하는 것!!
		 *    			>> 슈퍼클래스의 인스턴스를 서브클래스 타입으로 형변환 하는 것.
		 *    		> 참조 가능한 영역이 확대된다.
		 *    		> 자동 형변환이 일어나지 않기때문에, 강제 형변환이 필요하다 !! (명시적)
		 *    		> 강제 형변환을 통해 구문오류가 해결 되더라도, 실제 실행 시점에서 오류가 발생된다 !!
		 *    			>> 존재하지 않는 영역의 참조 위험성 때문이다 !!
		 *    
		 *    ============================================================================================
		 *    		> 다운캐스팅 후에도 실행 시 오류가 발생할 수 있으므로, 인스턴스의 클래스 타입과
		 *    		> 참조하는 레퍼런스 변수의 상속관계를 고려하여 다운캐스팅을 수행해야 한다 !!!
		 *    		>> 결론 !!
		 *    			> 이전에 이미 업캐스팅된 인스턴서(레퍼런스)를 다시 다운캐스팅 하는 경우에만 안전하다!!
		 *    			>>> 그외의 다운캐스팅은 인정되지 않는다 !!!!
		 *    
		 *    		
		 */
		
		//슈퍼클래스 Parent 클래스의 인스턴스 생성
		Parent p = new Parent();
		// Parent 타입의 참조변수 p로 접근 가능한 메서드 : 1개
		p.parentPrn();
		
		System.out.println("---------------------------------");
		
		//서브클래스 Child 클래스의 인스턴스 생성
		Child c = new Child();
		// Child 타입의 참조변수 c로 접근 가능한 메서드 : 2개
		c.parentPrn(); // 상속받은 메서드
		c.childPrn();  // 직접 정의한 메서드
		
		System.out.println("====================================");
		
		// 업캐스팅 : 서브클래스 타입 >> 슈퍼클래스 타입 ( 부 = 자)
		
		// 슈퍼클래스 타입 Parent의 레퍼런스 변수 선언
		Parent p2;
		// 슈퍼클래스 타입 변수 p2에 서브클래스 타입 Child 인스턴스 주소값 전달.
		p2 = c;
		// 서브클래스 Child 타입 인스턴스 > 슈퍼클래스 Parent 타입으로 형변환
		// > 슈퍼클래스 타입 변수 p2가 서브클래스 인스턴스 c를 참조한다. (가르킨다.)
		
		System.out.println("p2와 c의 인스턴스가 동일한가?"+(p2 == c));
		
		// Parent 타입 레퍼런스 변수 p2로 접근 가능한 메서드 > 1개 !!
		p2.parentPrn(); // 상속된 메서드, 접근 가능
//		p2.childPrn();  // 서브클래스에서 정의한 메서드 > 접근불가 !
		// 슈퍼클래스 타입으로 업캐스팅 된 후에는 상속된 메서드(공통)만 호출 가능하다 !
		// >> 슈퍼클래스 타입으로 서브클래스 인스턴스를 참조하게 되면, 참조 영역에 대한 축소로 인해 서브클래스 메서드가 보이지않게 된다.
		
		
		
		System.out.println("====================================");
		// 다운캐스팅(자 = 부)
		
		// 슈퍼클래스 Parent 타입 인스턴스 생성
		Parent p3 = new Parent();
		
		// 슈퍼클래스 Parent 타입 변수 p3가 접근 가능한 메서드 : 1개
		p3.parentPrn();
		
		// 서브클래스 Child 타입 변수 c3 선언
		Child c3;
//		c3 = p3; // 컴파일에러 발생!! > 타입 미스매치 !! // 주석처리
		
		// 형변환 연산자를 통해 명시적 형변환을 해줘야 한다 !!
//		c3 = (Child)p3; // Parent p3 > Child p3로 강제 형변환 (다운캐스팅)
		// 문법적 오류는 사라졌다 !
		// ClassCastException 오류가 발생한다 !!(논리적 오류!!)
		// >> 존재하지않는 영역에 대한 참조 위험성때문에 다운캐스팅이 기본적으로 불가능하다 !!
//		p3.parentPrn();
//		c3.parentPrn();
//		c3.childPrn(); // > p3에는 존재하지 않는 영역!!!
		// p3보다 c3 메모리 영역이 크기때문에 발생하는 오류 !
		// p3은 chilePrn()에 접근할 수 없기때문에, c3에 대입하는 경우 메모리 영역에서 논리적 오류가 발생하는것.
		// 자바에서는 기본적으로 다운캐스팅을 허용하지 않음 !
		
		System.out.println("====================================");
		// 다운캐스팅이 가능한 경우.
		
		//Child 타입 인스턴스를 Parent타입 변수 p4에 전달 > 업캐스팅
		Parent p4 = new Child(); // 자동 형변환이 일어난다. (업캐스팅 할때 흔히 사용됨)
		// 업캐스팅에 의해 참조영역이 축소되므로 접근가능한 메서드는 1개 !!
		p4.parentPrn(); // 상속된 메서드
//		p4.childPrn(); 	// 상속되지 않은 (서브클래스에서 정의한) 메서드는 호출 불가 !!
		
		//업캐스팅된 Parent 타입 p4의 주소값을 Child 타입 변수 c4에 전달.
//		Child c4 = p4; // 명시적형변환 필요.
		Child c4 = (Child) p4; // 다운캐스팅 !!
		
		// 다운캐스팅에 의해 참조영역이 확대된다 !! > 접근가능한 메서드는 2개 !!
		c4.parentPrn(); // 상속된 메서드
		c4.childPrn();  // 서브클래스에서 정의한 메서드
		// >> 다운캐스팅 후에도 아무런 문제없이 인스턴스 사용이 가능하다 !!
		
		// >> 메모리 영역 순서가 parent 영역보다 child의 영역이 우선되어야 한다.
		
		
		
		
	
		
		
		
		
		
	}// main() method end
		

} // public class end

class Parent{
	// Parent 클래스의 멤버: 1개
	public void parentPrn() {
		System.out.println("슈퍼클래스의 parentPrn()");
	}
}// Parent class end

class Child extends Parent{
	// Child 클래스의 멤버: 2개 (상속 1+ 멤버 1)
	public void childPrn() {
		System.out.println("서브클래스의 childPrn()");
	}
	
}// Child class end




















