package method_;

public class Ex_0216 {

	public static void main(String[] args) {
		// 메서드Method
		// > 동작(작업)의 최소단위(작업을 수행하는 코드들의 모음)
		// ex) 밥먹다 > 밥을 떠서 입에 넣고 씹기 등의 기능과 변수가 필요함.
		// > 메서드는 반드시 호출되어야만 실행할 수 있다. > 선언만 해서는 실행되지 않음.
		// > 호출 하는 메서드 : caller, 호출 당하는 메서드 : worker
		// > 메서드 호출시 메서드에 전달하는 값 : 전달인자(Argument) > 전달인자를 저장하는 변수: 매개변수(Parameter)
		// > 메서드가 호출되면 작업을 수행한 후에 반드시 ! 호출한 위치로 돌아감.
		// > 이때, 호출한 곳으로 전달하는 값을 리턴값(Return Value)라고 한다. > 반드시 return문을 작성해야 리턴 가능.
		// > !! 리턴타입이 void인 메서드는 return문을 생략해도 되고, 리턴값 없이 return문만 기술할 수도 있다.
		// > 메서드 내에서 return문을 만나면 즉시 메서드를 종료하고 돌아간다.
		// > if문 등의 조건식을 사용하여 return문을 사용할 경우, 반드시 어떤 경우에도 return문이 실행되도록 ! 조건식을 작성해야 한다.
		
		// main()메서드 !!
		// > 자바에서 유일하게 호출하지 않아도 프로그램 실행 시점에서 자동으로 호출되는 메서드.
		// > 시작점이라고도 하며, 메서드 호출시 메서드 매개변수와 일치하는 타입 및 갯수의 데이터 전달이 필수적이다.(정의 형태 일치)
		
		//
		// <메서드의 4가지 형태>
		// 1. 파라미터 X, 리턴값 X
		// 2. 파라미터 X, 리턴값 O
		// 3. 파라미터 O, 리턴값 X
		// 4. 파라미터 O, 리턴값 O
		
		// <메서드 호출의 기본 문법>
		// 1. 리턴값이 없는 경우
		//	  >메서드명([데이터]);
		// 2. 리턴값이 있는 경우
		//	  > 데이터타입 변수명 = 메서드명([데이터]); > 리턴되는 데이터를 변수에 저장할 경우
		// 	  > System.out.println(메서드명[데이터]); > 리턴되는 데이터를 출력하거나 직접 연산에 사용하는 경우
		//
		//----- worker 메서드 호출 -----
		// 메서드 호출 방법
		// > 호출할 메서드의 이름을 사용하여 메서드를 호출하며, 전달할 데이터가 있을 경우 ()소괄호 안에 작성. method(int n){code;}; method(1);
		// > 데이터의 개수가 2개 이상인 경우, 콤마(,)로 구분한다.
		System.out.println("동생아! 불좀 끄고 가라 !!");
		//1. 파라미터(인자값(argument)을 받는 변수)가 없고, 리턴값도 없는 메서드 호출
		sister_1(); // sister_1()의 메서드를 호출(sister_1() 메서드로 흐름이 이동)
		// 매개변수(Parameter)가 없으므로, 소괄호에 전달할 데이터도 없다 !
		System.out.println("동생이 불을 끄고 갔다 ~");
		
//		System.out.println(sister_1()); // err, 리턴값이 없는 메서드는 출력문에서 호출하거나 변수에 대입할 수 없다!!
		
		System.out.println("=========================================");
		
		//2. 파라미터는 없고, 리턴값만 있는 메서드 호출
		System.out.println("동생아 ! 물좀 떠온나 !");												
		sister_2();																					//1 sister_2() 메서드에는 출력문과 리턴문으로 구성되어 있다. 1번의 경우, 출력문만 출력한다.
		// 리턴값이 있는 메서드 호출 후 변수에 저장하거나, 출력문에 사용가능
		System.out.println(sister_2());																//2 2번의 경우, 출력문과 리턴값을 출력한다. 호출문이 출력문이기 때문에, 리턴값까지 같이 출력 되는 것.
		
		String result = sister_2(); //int / char 등, String타입이 아닌 데이터타입 선언시 err		//3 3번의 경우, 출력문만 출력된다. 리턴값은 result변수에 저장된다.
		// > sister_2()메서드 호출 후, 리턴값 "물"을 전달받아 String타입 변수 result에 저장.
		System.out.println("동생이 가져다 준 것: "+result);											//4 4번의 경우, 밖출력문과 함께 리턴값이 출력된다. result 에는 리턴값이 저장되어있기 때문.
		// > 리턴값은 변수에 저장하지 않고 직접 사용도 가능하다.
		System.out.println("동생이 가져다 준 것: "+sister_2());										//5 5번의 경우 출력문과 밖출력문+리턴값이 같이 출력된다. 출력문이 출력되는 함수를 호출하였고, 리턴값이 밖 출력문을 통하여 출력되기 때문.


		
	} //main() 메서드 끝
	
		// ----- worker 메서드 정의 -----
		// <Method 정의 기본 문법>
		// [접근 제한자] 리턴타입 메서드명([매개변수]){
		//			실행문
		//			[return [리턴값];]
		//		} // []대괄호로 표시된 내용은 있기도 하고 없기도 한 내용
		//
		// 1. 파라미터(인자값(argument)을 받는 변수)가 없고, 리턴값도 없는 메서드 정의
		// > 메서드 파라미터가 없으므로 선언부 소괄호 안에 아무것도 명시하지 않음.
		// >> 리턴값이 없으므로, 리턴타입 부분에 특수한 데이터타입인 void타입 데이터를 선언한다.
		// >> void : 리턴값이 없다는 의미 !!
	
		public static void sister_1() {
			// sister_1() 메서드가 호출되었을때 수행할 작업을 작성
			System.out.println("동생: 오빠가 불 끄라고 해서 불을 껐다!");
		} // 메서드 종료 이후 메서드를 호출한 곳으로 이동(되돌아간다 !)
		
		// 2. 파라미터는 없고, 리턴값만 있는 메서드 정의
		// > 메서드 파라미터가 없으므로, 선언부 소괄호() 안에 아무것도 명시하지 않는다.
		// > 리턴값이 있다 !! 리턴할 데이터와 일치하는 데이터타입을 리턴타입 부분에 명시해야 한다.(문자열 리턴 > String타입명시)
		
		public static String sister_2() { // String을 void로 바꾸면 에러가 사라진다.
			System.out.println("동생: 오빠가 물을 떠오라고 시켜서 물을 떠다 줬다.");
			
//			return ;  // err
//			return 1; // err,타입 미스매치
//			return "물"; // O, 이와 같이 String타입에 해당하는 데이터를 리턴해야 한다.
			
			// 또는 변수에 String타입 데이터를 저장하여 리턴해도 된다.
			String item ="물";
			return item;
			 
		}
		
		// 해당 클래스는 메서드 종류를 리턴으로 나눈 것이다 !!
		
		
		
	}//Ex_0216.Class end

//} 
